package projecteuler

import scala.annotation.tailrec

//  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
//  would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//  Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
//  10: 1,2,5,10
//  15: 1,3,5,15
//  21: 1,3,7,21
//  28: 1,2,4,7,14,28
//  We can see that 28 is the first triangle number to have over five divisors.
//  What is the value of the first triangle number to have over five hundred divisors?

object ProblemTwelve {
  
  def solve():Int={
    highlyDivisibleTriangularNumber(1, 0, 500)
  }
  @tailrec
  def highlyDivisibleTriangularNumber(step: Int, triangularNumber: Int, qOfDivider: Int): Int = {
    val divs = (1 to math.sqrt(triangularNumber).toInt)
      .filter(triangularNumber % _ == 0)
      .flatMap(n => n :: List(triangularNumber / n))
    if qOfDivider == 1 then 3
    else if divs.length > qOfDivider then triangularNumber
    else highlyDivisibleTriangularNumber(step + 1, triangularNumber + step, qOfDivider)
  }
}
